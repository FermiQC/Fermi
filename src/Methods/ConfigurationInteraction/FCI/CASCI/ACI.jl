using Fermi.ConfigurationInteraction.DetOperations

function RFCI(alg::ACI)
    aoints = IntegralHelper{Float64}()
    rhf = Fermi.HartreeFock.RHF(aoints)
    RFCI(aoints, rhf, alg)
end

function RFCI(aoints::IntegralHelper, rhf::Fermi.HartreeFock.RHF, alg::ACI)

    ci_header()

    if typeof(aoints.eri_type) === JKFIT
        aoints = IntegralHelper(eri_type=RIFIT())
    elseif Options.get("precision") == "single"
        aoints = IntegralHelper()
    end
    moints = IntegralHelper(orbitals=rhf.orbitals)

    Eref = moints.orbitals.sd_energy
    mol = moints.molecule
    Vnuc = Molecules.nuclear_repulsion(mol.atoms)
    Nelec = mol.NÎ±
    Nbas = aoints.orbitals.basisset.nbas
    Nvir = Nbas - Nelec

    Nfrozen = Options.get("drop_occ")
    Ninac = Options.get("drop_vir")
    Nactive = Nbas - Nfrozen - Ninac

    act_elec = 2*(Nactive - Nvir + Ninac)

    if act_elec < 0
        error("\nInvalid number of frozen orbitals ($Nfrozen) for $(2*Nelec) electrons.")
    end

    if Nactive â‰¤ act_elec/2
        error("\nNumber of active orbitals ($Nactive) too small for $(act_elec) active electrons")
    end

    if Nactive+Ninac+Nfrozen > Nbas
        error("\nSum of active ($Nactive) frozen ($Nfrozen) and inactive ($Ninac) orbitals greater than number of orbitals ($Nbas)")
    end

    # Get integrals
    output("Transforming integrals... ", ending="")
    t = @elapsed begin
        hp  = Fermi.Integrals.compute!(moints, aoints, "T")
        hp += Fermi.Integrals.compute!(moints, aoints, "V")
        eri = Fermi.Integrals.compute!(moints, "ERI")
    end

    r = 1:(Nfrozen+Nactive)
    hp = hp[r,r]
    eri = eri[r,r,r,r]
    aoints = nothing
    moints = nothing
    output("Done in {:10.5f} seconds.\n", t)

    output(" => Active Space Information ({:d}e, {:d}o)", act_elec, Nactive)
    output(" â€¢ # of Total Electrons:       {:>5d}", Nelec)
    output(" â€¢ # of Active Electrons:      {:>5d}", act_elec)
    output(" â€¢ # of Orbitals:              {:>5d}", Nbas)
    output(" â€¢ # of Frozen Orbitals:       {:>5d}", Nfrozen)
    output(" â€¢ # of Inactive Orbitals:     {:>5d}", Ninac)
    output(" â€¢ # of Active Orbitals:       {:>5d}", Nactive)

    ttotal = @elapsed begin
        output("\n    â€¢ Computing FCI with the ACI algorithm.\n\n")
        act_range = (Nfrozen+1):(Nactive+Nfrozen)
        Ïƒ = Fermi.Options.get("Ïƒ")
        Î³ = Fermi.Options.get("Î³")
        pe = Fermi.Options.get("aci_print_screen")
    
        # Determine precision used to represent determinants
        det_size = 
        if Fermi.Options.get("det_size") == 64
            Int64
        elseif Fermi.Options.get("det_size") == 128
            Int128
        else
            throw(Fermi.InvalidFermiOption("Invalid determinant representation $(Fermi.Options.get("det_size"))"))
        end
    
        # Start reference space as HF
        zeroth = repeat('1', Nfrozen)*repeat('1', Int(act_elec/2))
        D0 = Determinant(zeroth, zeroth; precision=det_size)
        P = [D0]
        Pcoef = [1.0]

        E = Eref - Vnuc
        Î”E = 1.0
        ite = 1
    
        output(repeat("=",50))
        NÎ± = Int(act_elec/2)
        NÎ² = Int(act_elec/2)
        M = nothing
        Ïµsum = nothing
        Ïµest = nothing
        oldP = nothing
        cflag = false
        while true
            output(" â†’ Iteration {}", ite)
            output("Initial model space (P) size: {}", length(P))
    
            output("Generating First Order Interacting Space P â‡’ F ...")
            t = @elapsed F = get_fois(P, NÎ±, NÎ², act_range)
            output("FOIS size:                {}", length(F))
            output("FOIS contructed in {:5.5f} s.\n", t)
    
            output("Screening FOIS using 2-D Hamiltonian", Ïƒ)
            t = @elapsed Fe = ÏµI(F, P, Pcoef, E, hp, eri)
            output("Screen complete in {:5.5} s.", t)
            output("Sorting F space...")
            _t = @elapsed begin
                Fperm = zeros(Int, length(Fe))
                sortperm!(Fperm, Fe, by=abs)
                reverse!(Fperm)
                Fe = Fe[Fperm]
                F = F[Fperm]
            end
            output("Sorted in {:5.5f} s.", _t)
            output("Constructing secondary space (Q) by filtering F...")
            t = @elapsed begin
            Ïµest = 0.0
            Ïµsum = 0.0
            while true
                if length(Fe) == 0 
                    #then no determinants were deemed important - exit ACI
                    break
                end
                if Ïµsum â‰¤ Ïƒ
                    Ïµest += Fe[end]
                    Ïµsum += abs(Fe[end])
                    pop!(Fe)
                    pop!(F)
                else
                    Ïµest -= Fe[end]
                    Ïµsum -= abs(Fe[end])
                    break
                end
            end
            end
            output("Size of Q: {}", length(Fe))
            output("Secondary space (Q) built in {:5.5f}", t)
    
            Î”E = -E
            M = vcat(P, F)
            output("\nModel space size (P âˆª Q): {}", length(M))
            output("Solving for the model space wave function...", length(M))
            t = @elapsed E, Pcoef, P = update_model_space(M, hp, eri)
            output("Model space updated in {:5.5f}\n", t)
            Î”E += E
            output(" â€¢ Model Space Energy           {:15.10f}", E + Vnuc)
            output(" â€¢ Energy Change                {:15.10f}", Î”E)
    
            if oldP == Set(P) 
                cflag = true
                break
            end
            ite += 1
            if ite > 30
                break
            end
            oldP = Set(deepcopy(P))
            P, Pcoef = coarse_grain(P, Pcoef, Î³, Ïƒ)
    
            output("Final coarse grained model space size is {}", length(P))
            output(repeat("=",50)*"\n")
        end
    end #@elapsed
    
    output(repeat("=",50))
    if cflag
        output("ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ ACI procedure has converged. ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥")
    else
        output("ðŸ˜²ðŸ˜²ðŸ˜²ðŸ˜²ðŸ˜² ACI procedure has failed!!!! ðŸ˜²ðŸ˜²ðŸ˜²ðŸ˜²ðŸ˜²")
    end
    output("Computation finished in {:5.5} seconds.", ttotal)
    output("Model space size: {}", length(M))
    output("E[ACI:{}]     = {:15.10f}", Ïƒ, E + Vnuc)
    output("E[ACI:{}]+PT2 = {:15.10f}", Ïƒ, E + Vnuc + Ïµest)
    output(repeat("=",51)*"\n\n")
    E = (E+Vnuc)
    
    output("\n â€¢ Most important determinants:\n")
    output("Coefficient / Determinant / Î±-Occupancy / Î²-Occupancy")
    for i in 1:(min(10,length(P)))
        output("{:15.5f}      {}", Pcoef[i], detstring(P[i], Nfrozen+Nactive))
    end
        
    return RFCI(E, E-Eref, Pcoef, P)
end

@fastmath @inbounds function get_fois(dets::Vector{Determinant{T}}, NÎ±::Int, NÎ²::Int, act_range::UnitRange{Int64})::Vector{Determinant{T}} where T <: Integer

    one = typeof(dets[1].Î±)(1)
    # Ns must be > 1
    # Preallocate array for the position of occupied orbitals
    Î±occs = [zeros(Int,NÎ±) for i=1:Threads.nthreads()]
    Î²occs = [zeros(Int,NÎ²) for i=1:Threads.nthreads()]
    # Preallocate array for the position of unoccupied orbitals
    Î±unos = [zeros(Int,length(act_range)-NÎ±) for i=1:Threads.nthreads()]
    Î²unos = [zeros(Int,length(act_range)-NÎ²) for i=1:Threads.nthreads()]

    # Estimate FOIS per det
    lf_per_det = (length(Î±occs[1])^2*length(Î±unos[1])^2 + length(Î±occs[1])*length(Î±unos[1])
                       + length(Î²occs[1])^2*length(Î²unos[1])^2 + length(Î²occs[1])*length(Î²unos[1])
                       + length(Î±occs[1])*length(Î±unos[1])*length(Î²occs[1])*length(Î²unos[1]))
    # Estimated total number of determinants (FOIS per det * ndets)
    lf_crit = Int(round(length(dets)*lf_per_det))
    # Preallocate array to hold dummy dets
    fois = [Determinant(0,0) for i=1:lf_crit]
    @sync for _DI in eachindex(dets)
    #for _DI in eachindex(dets)
        Threads.@spawn begin
            d = dets[_DI]
            DI = (_DI-1)*lf_per_det + 1
            ct = 0
            id = Threads.threadid()
            Î±occ = Î±occs[id]
            Î²occ = Î²occs[id]
            Î±uno = Î±unos[id]
            Î²uno = Î²unos[id]
            Î±occ!(d, act_range, Î±occ)
            Î²occ!(d, act_range, Î²occ)
            Î±vir!(d, act_range, Î±uno)
            Î²vir!(d, act_range, Î²uno)
            # Get Î±Î± -> Î±Î± excitations
            for i in Î±occ
                for a in Î±uno
                    newÎ± = (d.Î± âŠ» (one<<(i-1))) | (one<<(a-1)) 
                    _det = Determinant(newÎ±, d.Î²)
                    fois[DI+ct] = _det
                    ct += 1
                    for j in Î±occ
                        if j â‰¥ i
                            break
                        end
                        for b in Î±uno
                            if b â‰¥ a
                                break
                            end
                            newestÎ± = (newÎ± âŠ» (one<<(j-1))) | (one<<(b-1)) 
                            _det = Determinant(newestÎ±, d.Î²)
                            fois[DI+ct] = _det
                            ct += 1
                        end
                    end
                end
            end
            # Get Î²Î² -> Î²Î² excitations
            for i in Î²occ
                for a in Î²uno
                    newÎ² = (d.Î² âŠ» (one<<(i-1))) | (one<<(a-1)) 
                    _det = Determinant(d.Î±, newÎ²)
                    fois[DI+ct] = _det
                    ct += 1
                    for j in Î²occ
                        if j â‰¥ i
                            break
                        end
                        for b in Î²uno
                            if b â‰¥ a
                                break
                            end
                            newestÎ² = (newÎ² âŠ» (one<<(j-1))) | (one<<(b-1)) 
                            _det = Determinant(d.Î±, newestÎ²)
                            fois[DI+ct] = _det
                            ct += 1
                        end
                    end
                end
            end
            # Get Î±Î² -> Î±Î² excitations
            for i in Î±occ
                for a in Î±uno
                    for j in Î²occ
                        for b in Î²uno
                            newÎ± = (d.Î± âŠ» (one<<(i-1))) | (one<<(a-1)) 
                            newÎ² = (d.Î² âŠ» (one<<(j-1))) | (one<<(b-1)) 
                            _det = Determinant(newÎ±, newÎ²)
                            fois[DI+ct] = _det
                            ct += 1
                        end
                    end
                end
            end
        end #Threads.@spawn 
    end
    fois = filter((x)->x != Determinant(0,0), fois)
    fois = Set(fois)
    setdiff!(fois, dets)
    fois = collect(fois)
    return fois 
end

function ÏµI(Fdets, P::Vector{Determinant{D}}, Pcoef::Vector{Float64}, Ep::T, h::Array{T,2}, V::Array{T,4}) where {T <: AbstractFloat, D <: Integer}
    Fe = zeros(length(Fdets))
    N = sum(Î±list(P[1]))
    Î±inds = [Array{Int64,1}(undef,N) for i=1:Threads.nthreads()]
    Î²inds = [Array{Int64,1}(undef,N) for i=1:Threads.nthreads()]
    @sync for i in eachindex(Fdets)
        begin
        D1 = Fdets[i]
        id = Threads.threadid()
        Î±ind = Î±inds[id]
        Î²ind = Î²inds[id]
        Î±index!(D1, Î±ind)
        Î²index!(D1, Î²ind)
        Ei = Hd0(Î±ind, Î²ind, h, V)
        Î” = Ei - Ep
        Vint = 0.0
        for j in eachindex(P)
            D2 = P[j]
            Î±exc = Î±excitation_level(D1,D2)
            Î²exc = Î²excitation_level(D1,D2)
            el = Î±exc + Î²exc
            if el > 2
                continue 
            elseif el == 2
                Vint += Pcoef[j]*Hd2(D1, D2, V, Î±exc)
            elseif el == 1
                Vint += Pcoef[j]*Hd1(Î±ind, Î²ind, D1, D2, h, V, Î±exc)
            end
        end
        
        @fastmath Fe[i] = Î”/2 - âˆš((Î”^2)/4 + Vint^2)
        end #Threads.@spawn
    end
    
    return Fe
end

function update_model_space(M::Vector{Determinant{D}}, h::Array{T,2}, V::Array{T,4}; complete=true) where {T <: AbstractFloat, D <: Integer}

    if complete
        M = complete_set(M)
    end
    H = get_sparse_hamiltonian_matrix(M, h, V, Fermi.Options.get("cas_cutoff"))

    output("Diagonalizing Hamiltonian...")
    decomp, history = partialschur(H, nev=1, tol=10^-12, which=LM())
    Î», Ï• = partialeigen(decomp)

    return Î»[1], Ï•[:,1], deepcopy(M)
end

function complete_set(dets::Vector{Determinant{T}}) where T <: Integer

    one = typeof(dets[1].Î±)(1)
    newdets = [Determinant{T}[] for i = 1:Threads.nthreads()]
    @Threads.threads for d in dets
        
        asym = d.Î± âŠ» d.Î²
        if asym == 0
            continue
        end

        sym = d.Î± & d.Î²

        n = count_ones(asym)
        e = Int(n/2)
        idx = Int[]

        str = vcat(repeat([1],e), repeat([0],e))
        perms = multiset_permutations(str, n)
        
        i = 1
        while (one<<(i-1)) â‰¤ asym
            if one<<(i-1) & asym â‰  0
                push!(idx, i) 
            end
            i += 1
        end

        for p in perms
            newÎ± = sym
            newÎ² = sym
            for (x,i) in zip(p,idx)
                if x == 1
                    newÎ± = newÎ± | (one<<(i-1))
                elseif x == 0
                    newÎ² = newÎ² | (one<<(i-1))
                end
            end
            push!(newdets[Threads.threadid()], Determinant(newÎ±, newÎ²))
        end
    end
    newdets = vcat(newdets...)
    return unique(vcat(dets,newdets))
end

function coarse_grain(dets::Vector{Determinant{D}}, C::Vector{T}, Î³::Number, Ïƒ::Float64) where {T <: AbstractFloat, D <: Integer}

    output("Coarse graining model space for next iteration")
    # Coarse grain
    Cperm = zeros(Int, length(C))
    sortperm!(Cperm, C, by=i->i^2)
    reverse!(Cperm)
    
    Pcoef = C[Cperm]
    P = dets[Cperm]
    
    while true
        if sum(Pcoef[1:end-1].^2) >= 1-Î³*Ïƒ
            pop!(Pcoef)
            pop!(P)
        else
            break
        end
    end
    return P, Pcoef
end